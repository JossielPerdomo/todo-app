{"version":3,"sources":["components/Todo.js","components/TodoForm.js","components/todoReducer.js","components/TodoList.js","App.js","index.js"],"names":["Todo","todos","completeTodo","removeTodo","updateTodo","map","todo","index","className","isComplete","text","id","onClick","TodoForm","edit","onSubmit","useState","input","setInput","useEffect","value","handleInputChange","target","name","e","preventDefault","Math","floor","random","type","placeholder","autoComplete","onChange","todoReducer","state","action","payload","filter","init","JSON","parse","localStorage","getItem","TodoList","useReducer","dispatch","setEdit","setItem","stringify","newValue","test","todoId","todoText","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9eb2cff6.chunk.js","sourcesContent":["import React from 'react';\nimport {AiFillDelete} from 'react-icons/ai';\nimport {AiFillEdit} from 'react-icons/ai';\nimport {AiFillCheckCircle} from 'react-icons/ai';\n\nexport const Todo = ({todos, completeTodo, removeTodo, updateTodo}) => {\n\n    return todos.map((todo, index) => (\n        <div \n            className={\n                todo.isComplete ? 'todo-row complete'\n                : 'todo-row'\n            }\n            key={index}\n        >\n            <div key={todo.id}\n            >\n                {todo.text}\n            </div>\n            <div className=\"icons\">\n\n                <AiFillCheckCircle \n                    className=\"check-icon\"\n                    onClick={() => completeTodo(todo.id)}\n                />\n                <AiFillEdit \n                    onClick={() => updateTodo(todo.id, todo.text)}\n                    className=\"edit-icon\"\n                />\n                <AiFillDelete \n                    onClick={() => removeTodo(todo.id)}\n                    className=\"delete-icon\"\n                />\n            </div>\n        </div>\n    ))\n}\n","import React, {useEffect, useState} from 'react'\n\nexport const TodoForm = ({edit, onSubmit}) => {\n\n    const [input, setInput] = useState({text: ''});\n\n    useEffect(() => {\n        setInput({\n            text: edit.value\n        });\n    }, [edit])\n    \n    const {text} = input;\n\n    const handleInputChange = ({target}) => {\n        setInput({\n            ...input,\n            [target.name]: target.value\n        })\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        onSubmit({\n            id: Math.floor(Math.random() * 10000),\n            text,\n            isComplete: false\n        });\n        setInput({\n            text: ''\n        });\n    }\n\n    return (\n        <form\n            className=\"todo-form\"\n            onSubmit={handleSubmit}\n        >\n            {\n                edit.id ? (\n                    <>\n                    <input \n                        className=\"todo-input edit\"\n                        type=\"text\"\n                        placeholder=\"Update task\"\n                        autoComplete=\"off\"\n                        name=\"text\"\n                        value={text}\n                        onChange={handleInputChange}\n                    />\n\n                    <button \n                        className=\"todo-button edit\"\n                        type=\"submit\"\n                    >\n                        Update \n                    </button>\n                    </>\n                )\n                : (\n                    <>\n                    <input \n                        className=\"todo-input\"\n                        type=\"text\"\n                        placeholder=\"Add a task\"\n                        autoComplete=\"off\"\n                        name=\"text\"\n                        value={text}\n                        onChange={handleInputChange}\n                    />\n\n                    <button \n                        className=\"todo-button\"\n                        type=\"submit\"\n                    >\n                        Add Todo\n                    </button>\n                    </>\n                )\n            }\n        </form>\n    )\n}\n","\nexport const todoReducer = (state = [], action) => {\n    \n    switch (action.type) {\n        case \"add\":\n            return [...state, action.payload];\n        \n        case \"update\":\n            return state.map(todo => \n                (todo.id === action.payload.id)\n                ? {...todo, text: action.payload.value}\n                : state\n            );\n\n        case \"delete\":\n            return state.filter(todo => todo.id !== action.payload);\n\n        case \"toggle\":\n            return state.map(todo => (\n                todo.id === action.payload \n                ? {...todo, isComplete: !todo.isComplete}\n                : todo\n            ));\n\n        default:\n            return state;\n    }\n\n}\n","import React, {useEffect, useReducer, useState} from 'react'\nimport { Todo } from './Todo';\nimport { TodoForm } from './TodoForm'\nimport { todoReducer } from './todoReducer';\n\nconst init = () => {\n    return JSON.parse(localStorage.getItem('todos')) || [];\n}\n\nexport const TodoList = () => {\n    \n    const [todos, dispatch] = useReducer(todoReducer, [], init);\n    const [edit, setEdit] = useState({\n        id: null,\n        value: ''\n    });\n\n    useEffect(() => {\n        \n        localStorage.setItem('todos', JSON.stringify(todos))\n        \n    }, [todos])\n\n    const addTodo = (todo) => {\n        // RegExp to test whether a string val is empty or only contains spaces\n        if(!todo.text || /^\\s*$/.test(todo.text)){\n            return\n        }\n\n        dispatch({\n            type: \"add\",\n            payload: todo\n        });\n    }\n\n    const update = (newValue) => {\n        if(!newValue.text || /^\\s*$/.test(newValue.text)){\n            return\n        }\n\n        dispatch({\n            type: \"update\",\n            payload: {\n                id: edit.id,\n                value: newValue.text\n            }\n        });\n\n        setEdit({\n            id: null,\n            value: ''\n        });\n    }\n\n    const completeTodo = (id) => {\n        dispatch({\n            type: \"toggle\",\n            payload: id\n        });\n    }\n\n    const updateTodo = (todoId, todoText) => {\n        setEdit({\n            id: todoId,\n            value: todoText\n        })\n    }\n\n\n    const removeTodo = (id) => {\n        dispatch({\n            type: \"delete\",\n            payload: id\n        });\n    }\n\n    return (\n        <div>\n            <h1>Do you have any plans for today?</h1>\n            {\n                edit.id ? \n                (<TodoForm edit={edit} onSubmit={update}/>)\n                :\n                (<TodoForm edit={edit} onSubmit={addTodo}/> )\n\n            }   \n            <Todo \n                todos={todos}\n                completeTodo={completeTodo}\n                removeTodo={removeTodo}\n                updateTodo={updateTodo}\n            />       \n        </div>\n    )\n}\n","import './App.css';\nimport { TodoList } from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n      <TodoList/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}